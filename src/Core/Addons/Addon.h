///----------------------------------------------------------------------------------------------------
/// Copyright (c) Raidcore.GG - All rights reserved.
///
/// Name         :  Addon.h
/// Description  :  Addon implementation.
/// Authors      :  K. Bieniek
///----------------------------------------------------------------------------------------------------

#ifndef ADDON_H
#define ADDON_H

#include <condition_variable>
#include <cstdint>
#include <filesystem>
#include <mutex>
#include <queue>
#include <thread>

#include "AddConst.h"
#include "AddEnum.h"
#include "Core/Addons/Config/CfgManager.h"
#include "Core/Addons/Config/Config.h"
#include "Core/Addons/Definitions/AddonDefV1.h"
#include "Engine/Events/EvtApi.h"
#include "Engine/Loader/LdrAddonBase.h"
#include "Engine/Loader/Loader.h"
#include "GW2/ArcDPS/ArcExtensionDef.h"

using ArcExtensionDef_t = ArcDPS::ExtensionDef_t;

constexpr const char* CH_ADDON = "Addon";

///----------------------------------------------------------------------------------------------------
/// CAddon Class
///----------------------------------------------------------------------------------------------------
class CAddon : public virtual IAddon
{
	public:
	///----------------------------------------------------------------------------------------------------
	/// ctor
	///----------------------------------------------------------------------------------------------------
	CAddon(std::filesystem::path aLocation);

	///----------------------------------------------------------------------------------------------------
	/// dtor
	///----------------------------------------------------------------------------------------------------
	~CAddon() override;

	///----------------------------------------------------------------------------------------------------
	/// GetSignature:
	/// 	Returns the unique signature of the addon.
	///----------------------------------------------------------------------------------------------------
	uint32_t GetSignature() override;

	///----------------------------------------------------------------------------------------------------
	/// GetName:
	/// 	Returns the name of the addon.
	///----------------------------------------------------------------------------------------------------
	std::string GetName();

	///----------------------------------------------------------------------------------------------------
	/// GetAuthor:
	/// 	Returns the author of the addon.
	///----------------------------------------------------------------------------------------------------
	std::string GetAuthor();

	///----------------------------------------------------------------------------------------------------
	/// GetDescription:
	/// 	Returns the description of the addon.
	///----------------------------------------------------------------------------------------------------
	std::string GetDescription();

	///----------------------------------------------------------------------------------------------------
	/// GetVersion:
	/// 	Returns the version of the addon.
	///----------------------------------------------------------------------------------------------------
	std::string GetVersion();

	///----------------------------------------------------------------------------------------------------
	/// GetConfig:
	/// 	Returns the config of the addon.
	///----------------------------------------------------------------------------------------------------
	Config_t* GetConfig();

	///----------------------------------------------------------------------------------------------------
	/// Load:
	/// 	Loads the addon.
	///----------------------------------------------------------------------------------------------------
	void Load() override;

	///----------------------------------------------------------------------------------------------------
	/// Unload:
	/// 	Unloads the addon.
	///----------------------------------------------------------------------------------------------------
	void Unload() override;

	///----------------------------------------------------------------------------------------------------
	/// Uninstall:
	/// 	Uninstalls the addon.
	///----------------------------------------------------------------------------------------------------
	void Uninstall() override;

	///----------------------------------------------------------------------------------------------------
	/// CheckForUpdate:
	/// 	Checks if an update is available.
	///----------------------------------------------------------------------------------------------------
	void CheckForUpdate();

	///----------------------------------------------------------------------------------------------------
	/// Update:
	/// 	Updates the addon.
	///----------------------------------------------------------------------------------------------------
	void Update();

	///----------------------------------------------------------------------------------------------------
	/// HasInterface:
	/// 	Returns true if the current module supports the passed interface.
	///----------------------------------------------------------------------------------------------------
	bool HasInterface(EAddonInterfaces aInterface) const;

	///----------------------------------------------------------------------------------------------------
	/// IsDuplicate:
	/// 	Checks if this addon is a duplicate.
	///----------------------------------------------------------------------------------------------------
	bool IsDuplicate();

	///----------------------------------------------------------------------------------------------------
	/// IsFileLocked:
	/// 	Returns true, if the file on disk is locked and cannot be removed.
	///----------------------------------------------------------------------------------------------------
	bool IsFileLocked() const;

	///----------------------------------------------------------------------------------------------------
	/// IsStateLocked:
	/// 	Returns true, if the addon can no longer be loaded or unloaded.
	///----------------------------------------------------------------------------------------------------
	bool IsStateLocked() const;

	///----------------------------------------------------------------------------------------------------
	/// IsUpdateAvailable:
	/// 	Returns true, if an update is available.
	///----------------------------------------------------------------------------------------------------
	bool IsUpdateAvailable() const;

	///----------------------------------------------------------------------------------------------------
	/// IsRunningAction:
	/// 	Returns true, if the addon is currently performing an action.
	///----------------------------------------------------------------------------------------------------
	bool IsRunningAction() const;

	///----------------------------------------------------------------------------------------------------
	/// IsUninstalled:
	/// 	Returns true, if the addon was uninstalled.
	///----------------------------------------------------------------------------------------------------
	bool IsUninstalled() const;

	private:
	CLogApi*                 Logger               = nullptr;
	CLoader*                 Loader               = nullptr;
	CEventApi*               EventApi             = nullptr;
	CConfigMgr*              ConfigMgr            = nullptr;

	EAddonInterfaces         ModuleInterfaces     = EAddonInterfaces::None;
	EAddonFlags              Flags                = EAddonFlags::None;

	Config_t*                Config               = nullptr;
	
	AddonDefV1_t*            NexusAddonDefV1      = {};
	ArcExtensionDef_t*       ArcExtensionDef      = {};
	/* AlAddonDef_t*            AlAddonDef           = {}; */

	std::queue<EAddonAction> QueuedActions;
	std::condition_variable  ConVar;
	bool                     IsRunning            = false;
	std::mutex               ProcessorMutex;
	std::thread              ProcessorThread;
	uint32_t                 ProcessorThreadID    = 0;

	///----------------------------------------------------------------------------------------------------
	/// ProcessActions:
	/// 	Performs queued actions.
	///----------------------------------------------------------------------------------------------------
	void ProcessActions();

	///----------------------------------------------------------------------------------------------------
	/// LoadInternal:
	/// 	Loads the addon.
	///----------------------------------------------------------------------------------------------------
	void LoadInternal();

	///----------------------------------------------------------------------------------------------------
	/// UnloadInternal:
	/// 	Unloads the addon.
	///----------------------------------------------------------------------------------------------------
	void UnloadInternal();

	///----------------------------------------------------------------------------------------------------
	/// UninstallInternal:
	/// 	Uninstalls the addon.
	///----------------------------------------------------------------------------------------------------
	void UninstallInternal();

	///----------------------------------------------------------------------------------------------------
	/// CheckForUpdateInternal:
	/// 	Checks if an update is available.
	///----------------------------------------------------------------------------------------------------
	void CheckForUpdateInternal();

	///----------------------------------------------------------------------------------------------------
	/// UpdateInternal:
	/// 	Updates the addon.
	///----------------------------------------------------------------------------------------------------
	void UpdateInternal();

	///----------------------------------------------------------------------------------------------------
	/// EnumInterfaces:
	/// 	Enumerates the addon interfaces associated with the file.
	///----------------------------------------------------------------------------------------------------
	const EAddonInterfaces& EnumInterfaces();

	///----------------------------------------------------------------------------------------------------
	/// ShouldLoad:
	/// 	Determines whether Load should be called.
	///----------------------------------------------------------------------------------------------------
	bool ShouldLoad();

	///----------------------------------------------------------------------------------------------------
	/// ShouldUpdate:
	/// 	Determines whether Update should be called.
	///----------------------------------------------------------------------------------------------------
	bool ShouldUpdate();
};

static inline IAddon* IAddonFactory(std::filesystem::path aLocation)
{
	return new CAddon(aLocation);
}

#endif
