///----------------------------------------------------------------------------------------------------
/// Copyright (c) Raidcore.GG - All rights reserved.
///
/// Name         :  LogApi.h
/// Description  :  Provides logging functions and allows for custom logging implementations.
/// Authors      :  K. Bieniek
///----------------------------------------------------------------------------------------------------

#ifndef LOGAPI_H
#define LOGAPI_H

#include <mutex>
#include <vector>
#include <string>

#include "LogBase.h"
#include "LogMsg.h"
#include "LogEnum.h"

///----------------------------------------------------------------------------------------------------
/// CLogApi Class
///----------------------------------------------------------------------------------------------------
class CLogApi
{
	public:
	///----------------------------------------------------------------------------------------------------
	/// dtor
	///----------------------------------------------------------------------------------------------------
	~CLogApi();

	///----------------------------------------------------------------------------------------------------
	/// Register:
	/// 	Registers a logger.
	///----------------------------------------------------------------------------------------------------
	void Register(ILogger* aLogger);

	///----------------------------------------------------------------------------------------------------
	/// Deregister:
	/// 	Deregisters a logger.
	///----------------------------------------------------------------------------------------------------
	void Deregister(ILogger* aLogger);

	///----------------------------------------------------------------------------------------------------
	/// Critical:
	/// 	Logs a message with level Critical.
	///----------------------------------------------------------------------------------------------------
	void Critical(const std::string& aChannel, const char* aFmt, ...);

	///----------------------------------------------------------------------------------------------------
	/// Warning:
	/// 	Logs a message with level Warning.
	///----------------------------------------------------------------------------------------------------
	void Warning(const std::string& aChannel, const char* aFmt, ...);

	///----------------------------------------------------------------------------------------------------
	/// Info:
	/// 	Logs a message with level Info.
	///----------------------------------------------------------------------------------------------------
	void Info(const std::string& aChannel, const char* aFmt, ...);

	///----------------------------------------------------------------------------------------------------
	/// Debug:
	/// 	Logs a message with level Debug.
	///----------------------------------------------------------------------------------------------------
	void Debug(const std::string& aChannel, const char* aFmt, ...);

	///----------------------------------------------------------------------------------------------------
	/// Trace:
	/// 	Logs a message with level Trace.
	///----------------------------------------------------------------------------------------------------
	void Trace(const std::string& aChannel, const char* aFmt, ...);

	///----------------------------------------------------------------------------------------------------
	/// Log:
	/// 	Logs a message to a specific channel.
	///----------------------------------------------------------------------------------------------------
	void Log(ELogLevel aLogLevel, std::string aChannel, const char* aFmt, ...);

	///----------------------------------------------------------------------------------------------------
	/// LogV:
	/// 	Logs a message to a specific channel with printf-style formatting.
	///----------------------------------------------------------------------------------------------------
	void LogV(ELogLevel aLogLevel, std::string aChannel, const char* aFmt, va_list aArgs);

	///----------------------------------------------------------------------------------------------------
	/// LogUnformatted:
	/// 	Logs an unformatted message to a specific channel.
	///----------------------------------------------------------------------------------------------------
	void LogUnformatted(ELogLevel aLogLevel, std::string aChannel, const char* aMsg);

	private:
	std::mutex             Mutex;
	std::vector<ILogger*>  Registry;
	std::vector<LogMsg_t*> Messages;
};

#endif
